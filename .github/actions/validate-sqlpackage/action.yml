name: 'Validating package changes'
description: 'Validates the changes analyzed by a SqlPackage'
inputs:
  environment:
    description: 'Environment identifier to include in the report'
    required: true
    default: 'dev'
  sqlpackage-report:
    description: 'The filepath of the report generated by SqlPackage. It has extension XML'
    required: true
  outputpath:
    description: 'The output folder where assets will be generated if any'
    required: false
    default: .
  outputfile:
    description: 'The output file name, with extension MD'
    default: 'deployreport.md'
  haltonerrors:
    description: 'If the action should fail when validation errors are found'
    default: true
outputs:
  can-ignore:
    description: "Indicates if the deployment can be ignored as no changes are performed"
    value: ${{ steps.validate.outputs.ignorable }}
  errors:
    description: "Indicates if the de"
    value: ${{ steps.validate.outputs.errors }}
runs:
  using: "composite"
  steps:
    - id: validate
      name: Validating proposed changes
      shell: pwsh
      run: |
        Write-Host "::debug::Ensuring target folder '${{ inputs.outputpath }}'"
        New-Item -Path '${{ inputs.outputpath }}' -ItemType Directory -ErrorAction SilentlyContinue

        $files = Get-ChildItem "${{ inputs.sqlpackage-report }}" | select FullName -ExpandProperty FullName
        $ignorable = $true
        $errors = $false

        Write-Host "##[debug]The following files were identified: $files"

        ForEach($report in $files)
        {
          $packageAnalysis = ${{ github.workspace }}/scripts/actions/validate-sqlpackage/Parse-SqlProfileReport.ps1  `
                                -Environment "${{ inputs.environment }}"  `
                                -SqlPackageReport $report  `
                                -OutputFilePath "${{ inputs.outputpath }}/${{ inputs.outputfile }}"  `
                                -HaltOnDataIssues ${{ '$' }}${{ inputs.haltonerrors }} `
                                -Platform "github"
          
          $ignorable = $ignorable -and $packageAnalysis.ignorable
          $errors = $errors -or $packageAnalysis.errors
        }

        write-host "::debug::Setting 'ignorable' variable to $ignorable"
        write-host "::debug::Set the 'errors' variable to $errors"
        write-host "::set-output name=ignorable::$ignorable"
        write-host "::set-output name=errors::$errors"
