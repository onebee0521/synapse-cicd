# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      ARTIFACTS_PATH: build
      PROFILE_PATH: profiles
      ENVIRONMENT_PREFIX: dev
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Installing SQL Data Tools
        run: |
          sudo apt-get install libunwind8
          wget -progress=bar:force -q -O azuredatastudio-linux.deb https://go.microsoft.com/fwlink/?linkid=2168339 \
            && sudo dpkg -i azuredatastudio-linux.deb \
            && rm azuredatastudio-linux.deb
          wget -progress=bar:force -q -O sqlpackage.zip \
            https://aka.ms/sqlpackage-linux \
            && unzip -qq sqlpackage.zip -d /opt/sqlpackage \
            && chmod a+x /opt/sqlpackage/sqlpackage \
            && rm sqlpackage.zip

      - name: Building DACPAC
        run: |
          dotnet build **/*.sqlproj /p:NetCoreBuild=true /p:NETCoreTargetsPath=/usr/share/azuredatastudio/resources/app/extensions/mssql/sqltoolsservice/Linux/3.0.0-release.110 /p:Configuration=Release /p:OutputPath=$PWD/${ARTIFACTS_PATH}
          echo "PACKAGE_NAME=$(find ${ARTIFACTS_PATH} -name '*.dacpac' -exec basename {} \;)" >> $GITHUB_ENV

      - name: Logining in into Azure
        uses: Azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true

      - name: Adquiring access token
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Az.Accounts -AllowClobber -Force
          $context = Get-AzContext
          $sqlToken = (Get-AzAccessToken -ResourceUrl "https://database.windows.net" -DefaultProfile $context).Token
          
          echo "SQL_TOKEN=$sqlToken" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      
      - name: Identifying proposed changes
        run: |
          /opt/sqlpackage/sqlpackage \
            /action:DeployReport \
            /sourcefile:$PWD/${ARTIFACTS_PATH}/${PACKAGE_NAME} \
            /Profile:${{ github.workspace }}/${PROFILE_PATH}/${ENVIRONMENT_PREFIX}.profile.xml \
            /AccessToken:${SQL_TOKEN} \
            /outputpath:$PWD/${ARTIFACTS_PATH}/deployreport.xml
      
      - name: Verifying proposed changes
        shell: pwsh
        run: |
          ${{ github.workspace }}/scripts/Parse-SqlProfileReport.ps1 -Environment "dev" -SqlPackageReport "$PWD/${ARTIFACTS_PATH}/deployreport.xml"

      - name: Publishing artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dacpac
          path: build/*
